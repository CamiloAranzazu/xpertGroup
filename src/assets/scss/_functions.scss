@import 'consts';
@import 'theming';


// ? ********************* CORE FUNCTIONS ******************************** ? //
@function size($resoltution: 'md'){
  @return map-get($sizes, $resoltution);
}

@function get-color($key, $alpha: 1, $contrast: false) {
  $color: map-get($colors, $key);
  @if $contrast {
    $color: map-get($contrasts, $key);
    // $color: contrast-color($color);
  }
  @return rgba($color, $alpha);
}

@function basic-gradient($color-key, $end-opacity: 1, $deg: -45deg) {
  @return linear-gradient(
    $deg,
    get-color($color-key, $end-opacity),
    get-color($color-key)
  );
}

@function main-gradient($opacity: 1, $a: 0%, $p: 100%) {
  @return linear-gradient(45deg, get-color('header-light', $opacity) $a, get-color('header-dark', $opacity) $p);
}

@function main-gradient-dialog($opacity: 1, $a: 0%, $p: 100%) {
  @return linear-gradient(45deg, get-color('heard-dialog-light', $opacity) $a, get-color('heard-dialog-dark', $opacity) $p);
}

@function main-button($opacity: 1, $a: 0%, $p: 100%) {
  @return linear-gradient(45deg, get-color('heard-dialog-light', $opacity) $a, get-color('heard-dialog-dark', $opacity) $p);
}


// ? ********************* UTILS FUNCTIONS ******************************** ? //

// ? ********************* LIST FUNCTIONS ******************************** ? //
@function contains($list, $var) {
  $contains: false;
  @each $item in $list {
    @if $item == $var {
      $contains: true;
    }
  }
  @return $contains;
}

// ? ********************* COLOR FUNCTIONS ******************************** ? //
@function luminance-lvl($color) {
  $red: nth($linear-channel-values, red($color) + 1);
  $green: nth($linear-channel-values, green($color) + 1);
  $blue: nth($linear-channel-values, blue($color) + 1);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

@function contrast-lvl($back, $front) {
  $backLum: luminance-lvl($back) + 0.05;
  $foreLum: luminance-lvl($front) + 0.05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

@function contrast-color($color) {
  $lightContrast: contrast-lvl($color, white);
  $darkContrast: contrast-lvl($color, black);

  @if ($lightContrast > $darkContrast) {
    @return get-color('light');
  } @else {
    @return get-color('dark');
  }
}

@function tetrad($color) {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $tetrad: (
    hsl($hue, $saturation, $lightness),
    hsl($hue + 90 % 360, $saturation, $lightness),
    hsl($hue + 180 % 360, $saturation, $lightness),
    hsl($hue + 270 % 360, $saturation, $lightness)
  );
  @return $tetrad;
}

@function multiply($fore, $back) {
  $red: red($back) * red($fore) / 255;
  $green: green($back) * green($fore) / 255;
  $blue: blue($back) * blue($fore) / 255;
  @return rgb($red, $green, $blue);
}

@function color-pallete($color, $variations: 10) {
  @debug 'Generate color palette from: #{$color}';
  $light: get-color('light');
  $dark: multiply($color, $color);
  $tetrad: tetrad($color);
  $palette: (
    50: mix($light, $color, 88%),
    100: mix($light, $color, 70%),
    200: mix($light, $color, 50%),
    300: mix($light, $color, 30%),
    400: mix($light, $color, 15%),
    500: mix($light, $color, 0%),
    600: mix($dark, $color, 13%),
    700: mix($dark, $color, 30%),
    800: mix($dark, $color, 46%),
    900: mix($dark, $color, 75%),
    A100: lighten(saturate(mix($dark, $color, 15%), 80%), 45.6%),
    A200: lighten(saturate(mix($dark, $color, 15%), 80%), 35.6%),
    A400: lighten(saturate(mix($dark, $color, 15%), 100%), 25.6%),
    A700: lighten(saturate(mix($dark, $color, 15%), 100%), 20.5%)
  );
  $contrasts: ( 500: $color );
  @each $shade, $color in $palette {
    @if ($shade != 'contrast') {
      $contrasts: map-merge($contrasts, (#{$shade}: contrast-color($color)));
    }
  }
  @return map-merge($palette,(contrast: $contrasts));
}
